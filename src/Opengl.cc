#include "Opengl.hh"
#include <iostream>
#include <SDL/SDL.h>

#ifndef GL_GLEXT_PROTOTYPES
# define INIT_EXTENSION(EXT, TYPE) PFN##TYPE##PROC EXT = 0

INIT_EXTENSION(glMultiTexCoord2fARB, GLMULTITEXCOORD2FARB);
INIT_EXTENSION(glActiveTexture, GLACTIVETEXTURE);
INIT_EXTENSION(glMultiTexCoord3i, GLMULTITEXCOORD3I);

// BASIC
// INIT_EXTENSION(glGetString, GLGETSTRING);
// INIT_EXTENSION(glGetIntegerv, GLGETINTEGERV);
INIT_EXTENSION(glGetStringi, GLGETSTRINGI);
// INIT_EXTENSION(glClear, GLCLEAR);

// Program
INIT_EXTENSION(glCreateProgram, GLCREATEPROGRAM);
INIT_EXTENSION(glDeleteProgram, GLDELETEPROGRAM);
INIT_EXTENSION(glUseProgram, GLUSEPROGRAM);
INIT_EXTENSION(glAttachShader, GLATTACHSHADER);
INIT_EXTENSION(glDetachShader, GLDETACHSHADER);
INIT_EXTENSION(glLinkProgram, GLLINKPROGRAM);
INIT_EXTENSION(glGetProgramiv, GLGETPROGRAMIV);
INIT_EXTENSION(glGetShaderInfoLog, GLGETSHADERINFOLOG);
INIT_EXTENSION(glGetUniformLocation, GLGETUNIFORMLOCATION);
INIT_EXTENSION(glUniform1i, GLUNIFORM1I);
INIT_EXTENSION(glUniform1iv, GLUNIFORM1IV);
INIT_EXTENSION(glUniform2iv, GLUNIFORM2IV);
INIT_EXTENSION(glUniform3iv, GLUNIFORM3IV);
INIT_EXTENSION(glUniform4iv, GLUNIFORM4IV);

INIT_EXTENSION(glUniform1f, GLUNIFORM1F);
INIT_EXTENSION(glUniform1fv, GLUNIFORM1FV);
INIT_EXTENSION(glUniform2fv, GLUNIFORM2FV);
INIT_EXTENSION(glUniform3fv, GLUNIFORM3FV);
INIT_EXTENSION(glUniform4fv, GLUNIFORM4FV);

INIT_EXTENSION(glUniform1d, GLUNIFORM1D);
INIT_EXTENSION(glUniform1dv, GLUNIFORM1DV);
INIT_EXTENSION(glUniform2dv, GLUNIFORM2DV);
INIT_EXTENSION(glUniform3dv, GLUNIFORM3DV);
INIT_EXTENSION(glUniform4dv, GLUNIFORM4DV);


INIT_EXTENSION(glUniform1ui, GLUNIFORM1UI);
INIT_EXTENSION(glUniform1uiv, GLUNIFORM1UIV);
INIT_EXTENSION(glUniform2uiv, GLUNIFORM2UIV);
INIT_EXTENSION(glUniform3uiv, GLUNIFORM3UIV);
INIT_EXTENSION(glUniform4uiv, GLUNIFORM4UIV);

INIT_EXTENSION(glUniformMatrix2fv, GLUNIFORMMATRIX2FV);
INIT_EXTENSION(glUniformMatrix3fv, GLUNIFORMMATRIX3FV);
INIT_EXTENSION(glUniformMatrix4fv, GLUNIFORMMATRIX4FV);


INIT_EXTENSION(glUniformMatrix2x3fv, GLUNIFORMMATRIX2X3FV);
INIT_EXTENSION(glUniformMatrix2x4fv, GLUNIFORMMATRIX2X4FV);
INIT_EXTENSION(glUniformMatrix3x2fv, GLUNIFORMMATRIX3X2FV);
INIT_EXTENSION(glUniformMatrix3x4fv, GLUNIFORMMATRIX3X4FV);
INIT_EXTENSION(glUniformMatrix4x2fv, GLUNIFORMMATRIX4X2FV);
INIT_EXTENSION(glUniformMatrix4x3fv, GLUNIFORMMATRIX4X3FV);

INIT_EXTENSION(glGetAttribLocation, GLGETATTRIBLOCATION);
INIT_EXTENSION(glVertexAttrib1f, GLVERTEXATTRIB1F);
INIT_EXTENSION(glVertexAttrib1fv, GLVERTEXATTRIB1FV);
INIT_EXTENSION(glVertexAttrib2fv, GLVERTEXATTRIB2FV);
INIT_EXTENSION(glVertexAttrib3fv, GLVERTEXATTRIB3FV);
INIT_EXTENSION(glVertexAttrib4fv, GLVERTEXATTRIB4FV);
INIT_EXTENSION(glEnableVertexAttribArray, GLENABLEVERTEXATTRIBARRAY);
INIT_EXTENSION(glDisableVertexAttribArray, GLDISABLEVERTEXATTRIBARRAY);
INIT_EXTENSION(glBindAttribLocation, GLBINDATTRIBLOCATION);
INIT_EXTENSION(glGetActiveUniform, GLGETACTIVEUNIFORM);

// Shader
INIT_EXTENSION(glCreateShader, GLCREATESHADER);
INIT_EXTENSION(glDeleteShader, GLDELETESHADER);
INIT_EXTENSION(glShaderSource, GLSHADERSOURCE);
INIT_EXTENSION(glCompileShader, GLCOMPILESHADER);
INIT_EXTENSION(glGetShaderiv, GLGETSHADERIV);

// VBO
INIT_EXTENSION(glGenBuffers, GLGENBUFFERS);
INIT_EXTENSION(glDeleteBuffers, GLDELETEBUFFERS);
INIT_EXTENSION(glBindBuffer, GLBINDBUFFER);
INIT_EXTENSION(glBufferData, GLBUFFERDATA);
INIT_EXTENSION(glBufferSubData, GLBUFFERSUBDATA);
INIT_EXTENSION(glVertexAttribPointer, GLVERTEXATTRIBPOINTER);
INIT_EXTENSION(glGetBufferParameteriv, GLGETBUFFERPARAMETERIV);

// VAO
//INIT_EXTENSION(glDrawArrays, PFNGLDRAWARRAYSINSTANCEDPROC);
INIT_EXTENSION(glBindVertexArray, GLBINDVERTEXARRAY);
INIT_EXTENSION(glGenVertexArrays, GLGENVERTEXARRAYS);
INIT_EXTENSION(glDrawRangeElements, GLDRAWRANGEELEMENTS);
INIT_EXTENSION(glMultiDrawElements, GLMULTIDRAWELEMENTS);
INIT_EXTENSION(glPrimitiveRestartIndex, GLPRIMITIVERESTARTINDEX);

# undef INIT_EXTENSION
#endif

namespace
{
  bool extensionExists(const char* name)
  {
    const unsigned char* exts = glGetString(GL_EXTENSIONS);
    if (strstr((const char*)exts, name) == 0)
    {
      std::cerr << "extension '" << name << "' non supportée" << std::endl;
      return false;
    }

    return true;
  }
} //namespace

bool initExtensions()
{
#ifndef GL_GLEXT_PROTOTYPES
#define DECLARE_EXTENSION(EXT, TYPE)                                    \
  {                                                                     \
    if (!(EXT = reinterpret_cast<PFN##TYPE##PROC>(reinterpret_cast<intptr_t>(SDL_GL_GetProcAddress(#EXT))))) \
      return false;                                                     \
  }

  DECLARE_EXTENSION(glMultiTexCoord2fARB, GLMULTITEXCOORD2FARB);
  DECLARE_EXTENSION(glActiveTexture, GLACTIVETEXTURE);
  DECLARE_EXTENSION(glMultiTexCoord3i, GLMULTITEXCOORD3I);

  // BASIC
  // DECLARE_EXTENSION(glGetString, GLGETSTRING);
  // DECLARE_EXTENSION(glGetIntegerv, GLGETINTEGERV);
  DECLARE_EXTENSION(glGetStringi, GLGETSTRINGI);
  // DECLARE_EXTENSION(glClear, GLCLEAR);

  // Program
  DECLARE_EXTENSION(glCreateProgram, GLCREATEPROGRAM);
  DECLARE_EXTENSION(glDeleteProgram, GLDELETEPROGRAM);
  DECLARE_EXTENSION(glUseProgram, GLUSEPROGRAM);
  DECLARE_EXTENSION(glAttachShader, GLATTACHSHADER);
  DECLARE_EXTENSION(glDetachShader, GLDETACHSHADER);
  DECLARE_EXTENSION(glLinkProgram, GLLINKPROGRAM);
  DECLARE_EXTENSION(glGetProgramiv, GLGETPROGRAMIV);
  DECLARE_EXTENSION(glGetShaderInfoLog, GLGETSHADERINFOLOG);
  DECLARE_EXTENSION(glGetUniformLocation, GLGETUNIFORMLOCATION);
  DECLARE_EXTENSION(glUniform1i, GLUNIFORM1I);
  DECLARE_EXTENSION(glUniform1iv, GLUNIFORM1IV);
  DECLARE_EXTENSION(glUniform2iv, GLUNIFORM2IV);
  DECLARE_EXTENSION(glUniform3iv, GLUNIFORM3IV);
  DECLARE_EXTENSION(glUniform4iv, GLUNIFORM4IV);

  DECLARE_EXTENSION(glUniform1f, GLUNIFORM1F);
  DECLARE_EXTENSION(glUniform1fv, GLUNIFORM1FV);
  DECLARE_EXTENSION(glUniform2fv, GLUNIFORM2FV);
  DECLARE_EXTENSION(glUniform3fv, GLUNIFORM3FV);
  DECLARE_EXTENSION(glUniform4fv, GLUNIFORM4FV);

  DECLARE_EXTENSION(glUniform1d, GLUNIFORM1D);
  DECLARE_EXTENSION(glUniform1dv, GLUNIFORM1DV);
  DECLARE_EXTENSION(glUniform2dv, GLUNIFORM2DV);
  DECLARE_EXTENSION(glUniform3dv, GLUNIFORM3DV);
  DECLARE_EXTENSION(glUniform4dv, GLUNIFORM4DV);


  DECLARE_EXTENSION(glUniform1ui, GLUNIFORM1UI);
  DECLARE_EXTENSION(glUniform1uiv, GLUNIFORM1UIV);
  DECLARE_EXTENSION(glUniform2uiv, GLUNIFORM2UIV);
  DECLARE_EXTENSION(glUniform3uiv, GLUNIFORM3UIV);
  DECLARE_EXTENSION(glUniform4uiv, GLUNIFORM4UIV);

  DECLARE_EXTENSION(glUniformMatrix2fv, GLUNIFORMMATRIX2FV);
  DECLARE_EXTENSION(glUniformMatrix3fv, GLUNIFORMMATRIX3FV);
  DECLARE_EXTENSION(glUniformMatrix4fv, GLUNIFORMMATRIX4FV);


  DECLARE_EXTENSION(glUniformMatrix2x3fv, GLUNIFORMMATRIX2X3FV);
  DECLARE_EXTENSION(glUniformMatrix2x4fv, GLUNIFORMMATRIX2X4FV);
  DECLARE_EXTENSION(glUniformMatrix3x2fv, GLUNIFORMMATRIX3X2FV);
  DECLARE_EXTENSION(glUniformMatrix3x4fv, GLUNIFORMMATRIX3X4FV);
  DECLARE_EXTENSION(glUniformMatrix4x2fv, GLUNIFORMMATRIX4X2FV);
  DECLARE_EXTENSION(glUniformMatrix4x3fv, GLUNIFORMMATRIX4X3FV);

  DECLARE_EXTENSION(glGetAttribLocation, GLGETATTRIBLOCATION);
  DECLARE_EXTENSION(glVertexAttrib1f, GLVERTEXATTRIB1F);
  DECLARE_EXTENSION(glVertexAttrib1fv, GLVERTEXATTRIB1FV);
  DECLARE_EXTENSION(glVertexAttrib2fv, GLVERTEXATTRIB2FV);
  DECLARE_EXTENSION(glVertexAttrib3fv, GLVERTEXATTRIB3FV);
  DECLARE_EXTENSION(glVertexAttrib4fv, GLVERTEXATTRIB4FV);
  DECLARE_EXTENSION(glEnableVertexAttribArray, GLENABLEVERTEXATTRIBARRAY);
  DECLARE_EXTENSION(glDisableVertexAttribArray, GLDISABLEVERTEXATTRIBARRAY);
  DECLARE_EXTENSION(glBindAttribLocation, GLBINDATTRIBLOCATION);
  DECLARE_EXTENSION(glGetActiveUniform, GLGETACTIVEUNIFORM);

  // Shader
  DECLARE_EXTENSION(glCreateShader, GLCREATESHADER);
  DECLARE_EXTENSION(glDeleteShader, GLDELETESHADER);
  DECLARE_EXTENSION(glShaderSource, GLSHADERSOURCE);
  DECLARE_EXTENSION(glCompileShader, GLCOMPILESHADER);
  DECLARE_EXTENSION(glGetShaderiv, GLGETSHADERIV);

  // VBO
  DECLARE_EXTENSION(glGenBuffers, GLGENBUFFERS);
  DECLARE_EXTENSION(glDeleteBuffers, GLDELETEBUFFERS);
  DECLARE_EXTENSION(glBindBuffer, GLBINDBUFFER);
  DECLARE_EXTENSION(glBufferData, GLBUFFERDATA);
  DECLARE_EXTENSION(glBufferSubData, GLBUFFERSUBDATA);
  DECLARE_EXTENSION(glVertexAttribPointer, GLVERTEXATTRIBPOINTER);
  DECLARE_EXTENSION(glGetBufferParameteriv, GLGETBUFFERPARAMETERIV);

  // VAO
  //DECLARE_EXTENSION(glDrawArrays, PFNGLDRAWARRAYSINSTANCEDPROC);
  DECLARE_EXTENSION(glBindVertexArray, GLBINDVERTEXARRAY);
  DECLARE_EXTENSION(glGenVertexArrays, GLGENVERTEXARRAYS);
  DECLARE_EXTENSION(glDrawRangeElements, GLDRAWRANGEELEMENTS);
  DECLARE_EXTENSION(glMultiDrawElements, GLMULTIDRAWELEMENTS);
  DECLARE_EXTENSION(glPrimitiveRestartIndex, GLPRIMITIVERESTARTINDEX);

# undef DECLARE_EXTENSION
#endif

  return true;
}
